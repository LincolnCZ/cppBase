/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "audiolib_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace audiolib {


AudioDataInput::~AudioDataInput() throw() {
}


void AudioDataInput::__set_dataId(const std::string& val) {
  this->dataId = val;
}

void AudioDataInput::__set_content(const std::string& val) {
  this->content = val;
}

void AudioDataInput::__set_dataType(const std::string& val) {
  this->dataType = val;
}

void AudioDataInput::__set_extra(const std::string& val) {
  this->extra = val;
}
std::ostream& operator<<(std::ostream& out, const AudioDataInput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AudioDataInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dataId);
          this->__isset.dataId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dataType);
          this->__isset.dataType = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->extra);
          this->__isset.extra = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AudioDataInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AudioDataInput");

  xfer += oprot->writeFieldBegin("dataId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dataId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeBinary(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataType", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->dataType);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->extra);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AudioDataInput &a, AudioDataInput &b) {
  using ::std::swap;
  swap(a.dataId, b.dataId);
  swap(a.content, b.content);
  swap(a.dataType, b.dataType);
  swap(a.extra, b.extra);
  swap(a.__isset, b.__isset);
}

AudioDataInput::AudioDataInput(const AudioDataInput& other0) {
  dataId = other0.dataId;
  content = other0.content;
  dataType = other0.dataType;
  extra = other0.extra;
  __isset = other0.__isset;
}
AudioDataInput& AudioDataInput::operator=(const AudioDataInput& other1) {
  dataId = other1.dataId;
  content = other1.content;
  dataType = other1.dataType;
  extra = other1.extra;
  __isset = other1.__isset;
  return *this;
}
void AudioDataInput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AudioDataInput(";
  out << "dataId=" << to_string(dataId);
  out << ", " << "content=" << to_string(content);
  out << ", " << "dataType=" << to_string(dataType);
  out << ", " << "extra=" << to_string(extra);
  out << ")";
}


SplitResult::~SplitResult() throw() {
}


void SplitResult::__set_succ(const bool val) {
  this->succ = val;
}

void SplitResult::__set_dataId(const std::string& val) {
  this->dataId = val;
}

void SplitResult::__set_contents(const std::vector<std::string> & val) {
  this->contents = val;
}

void SplitResult::__set_duration(const double val) {
  this->duration = val;
}

void SplitResult::__set_segtime(const int32_t val) {
  this->segtime = val;
}
std::ostream& operator<<(std::ostream& out, const SplitResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t SplitResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->succ);
          this->__isset.succ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dataId);
          this->__isset.dataId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->contents.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->contents.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readBinary(this->contents[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.contents = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->duration);
          this->__isset.duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->segtime);
          this->__isset.segtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t SplitResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("SplitResult");

  xfer += oprot->writeFieldBegin("succ", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->succ);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dataId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contents", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->contents.size()));
    std::vector<std::string> ::const_iterator _iter7;
    for (_iter7 = this->contents.begin(); _iter7 != this->contents.end(); ++_iter7)
    {
      xfer += oprot->writeBinary((*_iter7));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("segtime", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->segtime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(SplitResult &a, SplitResult &b) {
  using ::std::swap;
  swap(a.succ, b.succ);
  swap(a.dataId, b.dataId);
  swap(a.contents, b.contents);
  swap(a.duration, b.duration);
  swap(a.segtime, b.segtime);
  swap(a.__isset, b.__isset);
}

SplitResult::SplitResult(const SplitResult& other8) {
  succ = other8.succ;
  dataId = other8.dataId;
  contents = other8.contents;
  duration = other8.duration;
  segtime = other8.segtime;
  __isset = other8.__isset;
}
SplitResult& SplitResult::operator=(const SplitResult& other9) {
  succ = other9.succ;
  dataId = other9.dataId;
  contents = other9.contents;
  duration = other9.duration;
  segtime = other9.segtime;
  __isset = other9.__isset;
  return *this;
}
void SplitResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "SplitResult(";
  out << "succ=" << to_string(succ);
  out << ", " << "dataId=" << to_string(dataId);
  out << ", " << "contents=" << to_string(contents);
  out << ", " << "duration=" << to_string(duration);
  out << ", " << "segtime=" << to_string(segtime);
  out << ")";
}


AudioOutput::~AudioOutput() throw() {
}


void AudioOutput::__set_succ(const bool val) {
  this->succ = val;
}

void AudioOutput::__set_dataId(const std::string& val) {
  this->dataId = val;
}

void AudioOutput::__set_content(const std::string& val) {
  this->content = val;
}

void AudioOutput::__set_duration(const double val) {
  this->duration = val;
}

void AudioOutput::__set_format(const std::string& val) {
  this->format = val;
}
std::ostream& operator<<(std::ostream& out, const AudioOutput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t AudioOutput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->succ);
          this->__isset.succ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dataId);
          this->__isset.dataId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->duration);
          this->__isset.duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->format);
          this->__isset.format = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t AudioOutput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("AudioOutput");

  xfer += oprot->writeFieldBegin("succ", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->succ);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dataId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("format", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->format);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(AudioOutput &a, AudioOutput &b) {
  using ::std::swap;
  swap(a.succ, b.succ);
  swap(a.dataId, b.dataId);
  swap(a.content, b.content);
  swap(a.duration, b.duration);
  swap(a.format, b.format);
  swap(a.__isset, b.__isset);
}

AudioOutput::AudioOutput(const AudioOutput& other10) {
  succ = other10.succ;
  dataId = other10.dataId;
  content = other10.content;
  duration = other10.duration;
  format = other10.format;
  __isset = other10.__isset;
}
AudioOutput& AudioOutput::operator=(const AudioOutput& other11) {
  succ = other11.succ;
  dataId = other11.dataId;
  content = other11.content;
  duration = other11.duration;
  format = other11.format;
  __isset = other11.__isset;
  return *this;
}
void AudioOutput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "AudioOutput(";
  out << "succ=" << to_string(succ);
  out << ", " << "dataId=" << to_string(dataId);
  out << ", " << "content=" << to_string(content);
  out << ", " << "duration=" << to_string(duration);
  out << ", " << "format=" << to_string(format);
  out << ")";
}

} // namespace
