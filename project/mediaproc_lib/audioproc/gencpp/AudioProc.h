/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef AudioProc_H
#define AudioProc_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "audiolib_types.h"

namespace audiolib {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class AudioProcIf {
 public:
  virtual ~AudioProcIf() {}
  virtual void splitAudio(SplitResult& _return, const AudioDataInput& mediaData, const int32_t lower, const int32_t upper) = 0;
  virtual void decodeAudio(AudioOutput& _return, const AudioDataInput& mediaData, const int32_t sampleRate, const int32_t channels) = 0;
  virtual void convertAudio(AudioOutput& _return, const AudioDataInput& mediaData, const int32_t sampleRate, const int32_t channels, const std::string& format) = 0;
};

class AudioProcIfFactory {
 public:
  typedef AudioProcIf Handler;

  virtual ~AudioProcIfFactory() {}

  virtual AudioProcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(AudioProcIf* /* handler */) = 0;
};

class AudioProcIfSingletonFactory : virtual public AudioProcIfFactory {
 public:
  AudioProcIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<AudioProcIf>& iface) : iface_(iface) {}
  virtual ~AudioProcIfSingletonFactory() {}

  virtual AudioProcIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(AudioProcIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<AudioProcIf> iface_;
};

class AudioProcNull : virtual public AudioProcIf {
 public:
  virtual ~AudioProcNull() {}
  void splitAudio(SplitResult& /* _return */, const AudioDataInput& /* mediaData */, const int32_t /* lower */, const int32_t /* upper */) {
    return;
  }
  void decodeAudio(AudioOutput& /* _return */, const AudioDataInput& /* mediaData */, const int32_t /* sampleRate */, const int32_t /* channels */) {
    return;
  }
  void convertAudio(AudioOutput& /* _return */, const AudioDataInput& /* mediaData */, const int32_t /* sampleRate */, const int32_t /* channels */, const std::string& /* format */) {
    return;
  }
};

typedef struct _AudioProc_splitAudio_args__isset {
  _AudioProc_splitAudio_args__isset() : mediaData(false), lower(false), upper(false) {}
  bool mediaData :1;
  bool lower :1;
  bool upper :1;
} _AudioProc_splitAudio_args__isset;

class AudioProc_splitAudio_args {
 public:

  AudioProc_splitAudio_args(const AudioProc_splitAudio_args&);
  AudioProc_splitAudio_args& operator=(const AudioProc_splitAudio_args&);
  AudioProc_splitAudio_args() : lower(0), upper(0) {
  }

  virtual ~AudioProc_splitAudio_args() throw();
  AudioDataInput mediaData;
  int32_t lower;
  int32_t upper;

  _AudioProc_splitAudio_args__isset __isset;

  void __set_mediaData(const AudioDataInput& val);

  void __set_lower(const int32_t val);

  void __set_upper(const int32_t val);

  bool operator == (const AudioProc_splitAudio_args & rhs) const
  {
    if (!(mediaData == rhs.mediaData))
      return false;
    if (!(lower == rhs.lower))
      return false;
    if (!(upper == rhs.upper))
      return false;
    return true;
  }
  bool operator != (const AudioProc_splitAudio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProc_splitAudio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProc_splitAudio_pargs {
 public:


  virtual ~AudioProc_splitAudio_pargs() throw();
  const AudioDataInput* mediaData;
  const int32_t* lower;
  const int32_t* upper;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioProc_splitAudio_result__isset {
  _AudioProc_splitAudio_result__isset() : success(false) {}
  bool success :1;
} _AudioProc_splitAudio_result__isset;

class AudioProc_splitAudio_result {
 public:

  AudioProc_splitAudio_result(const AudioProc_splitAudio_result&);
  AudioProc_splitAudio_result& operator=(const AudioProc_splitAudio_result&);
  AudioProc_splitAudio_result() {
  }

  virtual ~AudioProc_splitAudio_result() throw();
  SplitResult success;

  _AudioProc_splitAudio_result__isset __isset;

  void __set_success(const SplitResult& val);

  bool operator == (const AudioProc_splitAudio_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioProc_splitAudio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProc_splitAudio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioProc_splitAudio_presult__isset {
  _AudioProc_splitAudio_presult__isset() : success(false) {}
  bool success :1;
} _AudioProc_splitAudio_presult__isset;

class AudioProc_splitAudio_presult {
 public:


  virtual ~AudioProc_splitAudio_presult() throw();
  SplitResult* success;

  _AudioProc_splitAudio_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AudioProc_decodeAudio_args__isset {
  _AudioProc_decodeAudio_args__isset() : mediaData(false), sampleRate(false), channels(false) {}
  bool mediaData :1;
  bool sampleRate :1;
  bool channels :1;
} _AudioProc_decodeAudio_args__isset;

class AudioProc_decodeAudio_args {
 public:

  AudioProc_decodeAudio_args(const AudioProc_decodeAudio_args&);
  AudioProc_decodeAudio_args& operator=(const AudioProc_decodeAudio_args&);
  AudioProc_decodeAudio_args() : sampleRate(0), channels(0) {
  }

  virtual ~AudioProc_decodeAudio_args() throw();
  AudioDataInput mediaData;
  int32_t sampleRate;
  int32_t channels;

  _AudioProc_decodeAudio_args__isset __isset;

  void __set_mediaData(const AudioDataInput& val);

  void __set_sampleRate(const int32_t val);

  void __set_channels(const int32_t val);

  bool operator == (const AudioProc_decodeAudio_args & rhs) const
  {
    if (!(mediaData == rhs.mediaData))
      return false;
    if (!(sampleRate == rhs.sampleRate))
      return false;
    if (!(channels == rhs.channels))
      return false;
    return true;
  }
  bool operator != (const AudioProc_decodeAudio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProc_decodeAudio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProc_decodeAudio_pargs {
 public:


  virtual ~AudioProc_decodeAudio_pargs() throw();
  const AudioDataInput* mediaData;
  const int32_t* sampleRate;
  const int32_t* channels;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioProc_decodeAudio_result__isset {
  _AudioProc_decodeAudio_result__isset() : success(false) {}
  bool success :1;
} _AudioProc_decodeAudio_result__isset;

class AudioProc_decodeAudio_result {
 public:

  AudioProc_decodeAudio_result(const AudioProc_decodeAudio_result&);
  AudioProc_decodeAudio_result& operator=(const AudioProc_decodeAudio_result&);
  AudioProc_decodeAudio_result() {
  }

  virtual ~AudioProc_decodeAudio_result() throw();
  AudioOutput success;

  _AudioProc_decodeAudio_result__isset __isset;

  void __set_success(const AudioOutput& val);

  bool operator == (const AudioProc_decodeAudio_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioProc_decodeAudio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProc_decodeAudio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioProc_decodeAudio_presult__isset {
  _AudioProc_decodeAudio_presult__isset() : success(false) {}
  bool success :1;
} _AudioProc_decodeAudio_presult__isset;

class AudioProc_decodeAudio_presult {
 public:


  virtual ~AudioProc_decodeAudio_presult() throw();
  AudioOutput* success;

  _AudioProc_decodeAudio_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _AudioProc_convertAudio_args__isset {
  _AudioProc_convertAudio_args__isset() : mediaData(false), sampleRate(false), channels(false), format(false) {}
  bool mediaData :1;
  bool sampleRate :1;
  bool channels :1;
  bool format :1;
} _AudioProc_convertAudio_args__isset;

class AudioProc_convertAudio_args {
 public:

  AudioProc_convertAudio_args(const AudioProc_convertAudio_args&);
  AudioProc_convertAudio_args& operator=(const AudioProc_convertAudio_args&);
  AudioProc_convertAudio_args() : sampleRate(0), channels(0), format() {
  }

  virtual ~AudioProc_convertAudio_args() throw();
  AudioDataInput mediaData;
  int32_t sampleRate;
  int32_t channels;
  std::string format;

  _AudioProc_convertAudio_args__isset __isset;

  void __set_mediaData(const AudioDataInput& val);

  void __set_sampleRate(const int32_t val);

  void __set_channels(const int32_t val);

  void __set_format(const std::string& val);

  bool operator == (const AudioProc_convertAudio_args & rhs) const
  {
    if (!(mediaData == rhs.mediaData))
      return false;
    if (!(sampleRate == rhs.sampleRate))
      return false;
    if (!(channels == rhs.channels))
      return false;
    if (!(format == rhs.format))
      return false;
    return true;
  }
  bool operator != (const AudioProc_convertAudio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProc_convertAudio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class AudioProc_convertAudio_pargs {
 public:


  virtual ~AudioProc_convertAudio_pargs() throw();
  const AudioDataInput* mediaData;
  const int32_t* sampleRate;
  const int32_t* channels;
  const std::string* format;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioProc_convertAudio_result__isset {
  _AudioProc_convertAudio_result__isset() : success(false) {}
  bool success :1;
} _AudioProc_convertAudio_result__isset;

class AudioProc_convertAudio_result {
 public:

  AudioProc_convertAudio_result(const AudioProc_convertAudio_result&);
  AudioProc_convertAudio_result& operator=(const AudioProc_convertAudio_result&);
  AudioProc_convertAudio_result() {
  }

  virtual ~AudioProc_convertAudio_result() throw();
  AudioOutput success;

  _AudioProc_convertAudio_result__isset __isset;

  void __set_success(const AudioOutput& val);

  bool operator == (const AudioProc_convertAudio_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const AudioProc_convertAudio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const AudioProc_convertAudio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _AudioProc_convertAudio_presult__isset {
  _AudioProc_convertAudio_presult__isset() : success(false) {}
  bool success :1;
} _AudioProc_convertAudio_presult__isset;

class AudioProc_convertAudio_presult {
 public:


  virtual ~AudioProc_convertAudio_presult() throw();
  AudioOutput* success;

  _AudioProc_convertAudio_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class AudioProcClient : virtual public AudioProcIf {
 public:
  AudioProcClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AudioProcClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void splitAudio(SplitResult& _return, const AudioDataInput& mediaData, const int32_t lower, const int32_t upper);
  void send_splitAudio(const AudioDataInput& mediaData, const int32_t lower, const int32_t upper);
  void recv_splitAudio(SplitResult& _return);
  void decodeAudio(AudioOutput& _return, const AudioDataInput& mediaData, const int32_t sampleRate, const int32_t channels);
  void send_decodeAudio(const AudioDataInput& mediaData, const int32_t sampleRate, const int32_t channels);
  void recv_decodeAudio(AudioOutput& _return);
  void convertAudio(AudioOutput& _return, const AudioDataInput& mediaData, const int32_t sampleRate, const int32_t channels, const std::string& format);
  void send_convertAudio(const AudioDataInput& mediaData, const int32_t sampleRate, const int32_t channels, const std::string& format);
  void recv_convertAudio(AudioOutput& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class AudioProcProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<AudioProcIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (AudioProcProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_splitAudio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_decodeAudio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_convertAudio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  AudioProcProcessor(::apache::thrift::stdcxx::shared_ptr<AudioProcIf> iface) :
    iface_(iface) {
    processMap_["splitAudio"] = &AudioProcProcessor::process_splitAudio;
    processMap_["decodeAudio"] = &AudioProcProcessor::process_decodeAudio;
    processMap_["convertAudio"] = &AudioProcProcessor::process_convertAudio;
  }

  virtual ~AudioProcProcessor() {}
};

class AudioProcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  AudioProcProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< AudioProcIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< AudioProcIfFactory > handlerFactory_;
};

class AudioProcMultiface : virtual public AudioProcIf {
 public:
  AudioProcMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<AudioProcIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~AudioProcMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<AudioProcIf> > ifaces_;
  AudioProcMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<AudioProcIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void splitAudio(SplitResult& _return, const AudioDataInput& mediaData, const int32_t lower, const int32_t upper) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->splitAudio(_return, mediaData, lower, upper);
    }
    ifaces_[i]->splitAudio(_return, mediaData, lower, upper);
    return;
  }

  void decodeAudio(AudioOutput& _return, const AudioDataInput& mediaData, const int32_t sampleRate, const int32_t channels) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->decodeAudio(_return, mediaData, sampleRate, channels);
    }
    ifaces_[i]->decodeAudio(_return, mediaData, sampleRate, channels);
    return;
  }

  void convertAudio(AudioOutput& _return, const AudioDataInput& mediaData, const int32_t sampleRate, const int32_t channels, const std::string& format) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->convertAudio(_return, mediaData, sampleRate, channels, format);
    }
    ifaces_[i]->convertAudio(_return, mediaData, sampleRate, channels, format);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class AudioProcConcurrentClient : virtual public AudioProcIf {
 public:
  AudioProcConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  AudioProcConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void splitAudio(SplitResult& _return, const AudioDataInput& mediaData, const int32_t lower, const int32_t upper);
  int32_t send_splitAudio(const AudioDataInput& mediaData, const int32_t lower, const int32_t upper);
  void recv_splitAudio(SplitResult& _return, const int32_t seqid);
  void decodeAudio(AudioOutput& _return, const AudioDataInput& mediaData, const int32_t sampleRate, const int32_t channels);
  int32_t send_decodeAudio(const AudioDataInput& mediaData, const int32_t sampleRate, const int32_t channels);
  void recv_decodeAudio(AudioOutput& _return, const int32_t seqid);
  void convertAudio(AudioOutput& _return, const AudioDataInput& mediaData, const int32_t sampleRate, const int32_t channels, const std::string& format);
  int32_t send_convertAudio(const AudioDataInput& mediaData, const int32_t sampleRate, const int32_t channels, const std::string& format);
  void recv_convertAudio(AudioOutput& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
