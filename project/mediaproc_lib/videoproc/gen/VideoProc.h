/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef VideoProc_H
#define VideoProc_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "videolib_types.h"

namespace videolib {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class VideoProcIf {
 public:
  virtual ~VideoProcIf() {}
  virtual void cutFrame(CutFrameResult& _return, const VideoDataInput& mediaData, const CutConfig& config) = 0;
};

class VideoProcIfFactory {
 public:
  typedef VideoProcIf Handler;

  virtual ~VideoProcIfFactory() {}

  virtual VideoProcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(VideoProcIf* /* handler */) = 0;
};

class VideoProcIfSingletonFactory : virtual public VideoProcIfFactory {
 public:
  VideoProcIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<VideoProcIf>& iface) : iface_(iface) {}
  virtual ~VideoProcIfSingletonFactory() {}

  virtual VideoProcIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(VideoProcIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<VideoProcIf> iface_;
};

class VideoProcNull : virtual public VideoProcIf {
 public:
  virtual ~VideoProcNull() {}
  void cutFrame(CutFrameResult& /* _return */, const VideoDataInput& /* mediaData */, const CutConfig& /* config */) {
    return;
  }
};

typedef struct _VideoProc_cutFrame_args__isset {
  _VideoProc_cutFrame_args__isset() : mediaData(false), config(false) {}
  bool mediaData :1;
  bool config :1;
} _VideoProc_cutFrame_args__isset;

class VideoProc_cutFrame_args {
 public:

  VideoProc_cutFrame_args(const VideoProc_cutFrame_args&);
  VideoProc_cutFrame_args& operator=(const VideoProc_cutFrame_args&);
  VideoProc_cutFrame_args() {
  }

  virtual ~VideoProc_cutFrame_args() throw();
  VideoDataInput mediaData;
  CutConfig config;

  _VideoProc_cutFrame_args__isset __isset;

  void __set_mediaData(const VideoDataInput& val);

  void __set_config(const CutConfig& val);

  bool operator == (const VideoProc_cutFrame_args & rhs) const
  {
    if (!(mediaData == rhs.mediaData))
      return false;
    if (!(config == rhs.config))
      return false;
    return true;
  }
  bool operator != (const VideoProc_cutFrame_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VideoProc_cutFrame_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class VideoProc_cutFrame_pargs {
 public:


  virtual ~VideoProc_cutFrame_pargs() throw();
  const VideoDataInput* mediaData;
  const CutConfig* config;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VideoProc_cutFrame_result__isset {
  _VideoProc_cutFrame_result__isset() : success(false) {}
  bool success :1;
} _VideoProc_cutFrame_result__isset;

class VideoProc_cutFrame_result {
 public:

  VideoProc_cutFrame_result(const VideoProc_cutFrame_result&);
  VideoProc_cutFrame_result& operator=(const VideoProc_cutFrame_result&);
  VideoProc_cutFrame_result() {
  }

  virtual ~VideoProc_cutFrame_result() throw();
  CutFrameResult success;

  _VideoProc_cutFrame_result__isset __isset;

  void __set_success(const CutFrameResult& val);

  bool operator == (const VideoProc_cutFrame_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const VideoProc_cutFrame_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VideoProc_cutFrame_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _VideoProc_cutFrame_presult__isset {
  _VideoProc_cutFrame_presult__isset() : success(false) {}
  bool success :1;
} _VideoProc_cutFrame_presult__isset;

class VideoProc_cutFrame_presult {
 public:


  virtual ~VideoProc_cutFrame_presult() throw();
  CutFrameResult* success;

  _VideoProc_cutFrame_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class VideoProcClient : virtual public VideoProcIf {
 public:
  VideoProcClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VideoProcClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void cutFrame(CutFrameResult& _return, const VideoDataInput& mediaData, const CutConfig& config);
  void send_cutFrame(const VideoDataInput& mediaData, const CutConfig& config);
  void recv_cutFrame(CutFrameResult& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class VideoProcProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<VideoProcIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (VideoProcProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_cutFrame(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  VideoProcProcessor(::apache::thrift::stdcxx::shared_ptr<VideoProcIf> iface) :
    iface_(iface) {
    processMap_["cutFrame"] = &VideoProcProcessor::process_cutFrame;
  }

  virtual ~VideoProcProcessor() {}
};

class VideoProcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  VideoProcProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< VideoProcIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< VideoProcIfFactory > handlerFactory_;
};

class VideoProcMultiface : virtual public VideoProcIf {
 public:
  VideoProcMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<VideoProcIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~VideoProcMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<VideoProcIf> > ifaces_;
  VideoProcMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<VideoProcIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void cutFrame(CutFrameResult& _return, const VideoDataInput& mediaData, const CutConfig& config) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cutFrame(_return, mediaData, config);
    }
    ifaces_[i]->cutFrame(_return, mediaData, config);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class VideoProcConcurrentClient : virtual public VideoProcIf {
 public:
  VideoProcConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  VideoProcConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void cutFrame(CutFrameResult& _return, const VideoDataInput& mediaData, const CutConfig& config);
  int32_t send_cutFrame(const VideoDataInput& mediaData, const CutConfig& config);
  void recv_cutFrame(CutFrameResult& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
