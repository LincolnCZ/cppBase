/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef videolib_TYPES_H
#define videolib_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace videolib {

class VideoDataInput;

class CutConfig;

class FrameInfo;

class CutFrameResult;

typedef struct _VideoDataInput__isset {
  _VideoDataInput__isset() : dataId(false), localFile(false) {}
  bool dataId :1;
  bool localFile :1;
} _VideoDataInput__isset;

class VideoDataInput : public virtual ::apache::thrift::TBase {
 public:

  VideoDataInput(const VideoDataInput&);
  VideoDataInput& operator=(const VideoDataInput&);
  VideoDataInput() : dataId(), localFile() {
  }

  virtual ~VideoDataInput() throw();
  std::string dataId;
  std::string localFile;

  _VideoDataInput__isset __isset;

  void __set_dataId(const std::string& val);

  void __set_localFile(const std::string& val);

  bool operator == (const VideoDataInput & rhs) const
  {
    if (!(dataId == rhs.dataId))
      return false;
    if (!(localFile == rhs.localFile))
      return false;
    return true;
  }
  bool operator != (const VideoDataInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VideoDataInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(VideoDataInput &a, VideoDataInput &b);

std::ostream& operator<<(std::ostream& out, const VideoDataInput& obj);

typedef struct _CutConfig__isset {
  _CutConfig__isset() : interval(false), maxFrames(false) {}
  bool interval :1;
  bool maxFrames :1;
} _CutConfig__isset;

class CutConfig : public virtual ::apache::thrift::TBase {
 public:

  CutConfig(const CutConfig&);
  CutConfig& operator=(const CutConfig&);
  CutConfig() : interval(0), maxFrames(0) {
  }

  virtual ~CutConfig() throw();
  int32_t interval;
  int32_t maxFrames;

  _CutConfig__isset __isset;

  void __set_interval(const int32_t val);

  void __set_maxFrames(const int32_t val);

  bool operator == (const CutConfig & rhs) const
  {
    if (!(interval == rhs.interval))
      return false;
    if (!(maxFrames == rhs.maxFrames))
      return false;
    return true;
  }
  bool operator != (const CutConfig &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CutConfig & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CutConfig &a, CutConfig &b);

std::ostream& operator<<(std::ostream& out, const CutConfig& obj);

typedef struct _FrameInfo__isset {
  _FrameInfo__isset() : content(false), timeAt(false) {}
  bool content :1;
  bool timeAt :1;
} _FrameInfo__isset;

class FrameInfo : public virtual ::apache::thrift::TBase {
 public:

  FrameInfo(const FrameInfo&);
  FrameInfo& operator=(const FrameInfo&);
  FrameInfo() : content(), timeAt(0) {
  }

  virtual ~FrameInfo() throw();
  std::string content;
  int32_t timeAt;

  _FrameInfo__isset __isset;

  void __set_content(const std::string& val);

  void __set_timeAt(const int32_t val);

  bool operator == (const FrameInfo & rhs) const
  {
    if (!(content == rhs.content))
      return false;
    if (!(timeAt == rhs.timeAt))
      return false;
    return true;
  }
  bool operator != (const FrameInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrameInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(FrameInfo &a, FrameInfo &b);

std::ostream& operator<<(std::ostream& out, const FrameInfo& obj);

typedef struct _CutFrameResult__isset {
  _CutFrameResult__isset() : succ(false), dataId(false), imgs(false), duration(false) {}
  bool succ :1;
  bool dataId :1;
  bool imgs :1;
  bool duration :1;
} _CutFrameResult__isset;

class CutFrameResult : public virtual ::apache::thrift::TBase {
 public:

  CutFrameResult(const CutFrameResult&);
  CutFrameResult& operator=(const CutFrameResult&);
  CutFrameResult() : succ(0), dataId(), duration(0) {
  }

  virtual ~CutFrameResult() throw();
  bool succ;
  std::string dataId;
  std::vector<FrameInfo>  imgs;
  double duration;

  _CutFrameResult__isset __isset;

  void __set_succ(const bool val);

  void __set_dataId(const std::string& val);

  void __set_imgs(const std::vector<FrameInfo> & val);

  void __set_duration(const double val);

  bool operator == (const CutFrameResult & rhs) const
  {
    if (!(succ == rhs.succ))
      return false;
    if (!(dataId == rhs.dataId))
      return false;
    if (!(imgs == rhs.imgs))
      return false;
    if (!(duration == rhs.duration))
      return false;
    return true;
  }
  bool operator != (const CutFrameResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CutFrameResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(CutFrameResult &a, CutFrameResult &b);

std::ostream& operator<<(std::ostream& out, const CutFrameResult& obj);

} // namespace

#endif
