/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "videolib_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace videolib {


VideoDataInput::~VideoDataInput() throw() {
}


void VideoDataInput::__set_dataId(const std::string& val) {
  this->dataId = val;
}

void VideoDataInput::__set_localFile(const std::string& val) {
  this->localFile = val;
}
std::ostream& operator<<(std::ostream& out, const VideoDataInput& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VideoDataInput::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dataId);
          this->__isset.dataId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->localFile);
          this->__isset.localFile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VideoDataInput::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VideoDataInput");

  xfer += oprot->writeFieldBegin("dataId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->dataId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("localFile", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->localFile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VideoDataInput &a, VideoDataInput &b) {
  using ::std::swap;
  swap(a.dataId, b.dataId);
  swap(a.localFile, b.localFile);
  swap(a.__isset, b.__isset);
}

VideoDataInput::VideoDataInput(const VideoDataInput& other0) {
  dataId = other0.dataId;
  localFile = other0.localFile;
  __isset = other0.__isset;
}
VideoDataInput& VideoDataInput::operator=(const VideoDataInput& other1) {
  dataId = other1.dataId;
  localFile = other1.localFile;
  __isset = other1.__isset;
  return *this;
}
void VideoDataInput::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VideoDataInput(";
  out << "dataId=" << to_string(dataId);
  out << ", " << "localFile=" << to_string(localFile);
  out << ")";
}


CutConfig::~CutConfig() throw() {
}


void CutConfig::__set_interval(const int32_t val) {
  this->interval = val;
}

void CutConfig::__set_maxFrames(const int32_t val) {
  this->maxFrames = val;
}
std::ostream& operator<<(std::ostream& out, const CutConfig& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CutConfig::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->interval);
          this->__isset.interval = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->maxFrames);
          this->__isset.maxFrames = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CutConfig::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CutConfig");

  xfer += oprot->writeFieldBegin("interval", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->interval);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("maxFrames", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->maxFrames);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CutConfig &a, CutConfig &b) {
  using ::std::swap;
  swap(a.interval, b.interval);
  swap(a.maxFrames, b.maxFrames);
  swap(a.__isset, b.__isset);
}

CutConfig::CutConfig(const CutConfig& other2) {
  interval = other2.interval;
  maxFrames = other2.maxFrames;
  __isset = other2.__isset;
}
CutConfig& CutConfig::operator=(const CutConfig& other3) {
  interval = other3.interval;
  maxFrames = other3.maxFrames;
  __isset = other3.__isset;
  return *this;
}
void CutConfig::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CutConfig(";
  out << "interval=" << to_string(interval);
  out << ", " << "maxFrames=" << to_string(maxFrames);
  out << ")";
}


FrameInfo::~FrameInfo() throw() {
}


void FrameInfo::__set_content(const std::string& val) {
  this->content = val;
}

void FrameInfo::__set_timeAt(const int32_t val) {
  this->timeAt = val;
}
std::ostream& operator<<(std::ostream& out, const FrameInfo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t FrameInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->content);
          this->__isset.content = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->timeAt);
          this->__isset.timeAt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t FrameInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("FrameInfo");

  xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeBinary(this->content);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timeAt", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->timeAt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(FrameInfo &a, FrameInfo &b) {
  using ::std::swap;
  swap(a.content, b.content);
  swap(a.timeAt, b.timeAt);
  swap(a.__isset, b.__isset);
}

FrameInfo::FrameInfo(const FrameInfo& other4) {
  content = other4.content;
  timeAt = other4.timeAt;
  __isset = other4.__isset;
}
FrameInfo& FrameInfo::operator=(const FrameInfo& other5) {
  content = other5.content;
  timeAt = other5.timeAt;
  __isset = other5.__isset;
  return *this;
}
void FrameInfo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "FrameInfo(";
  out << "content=" << to_string(content);
  out << ", " << "timeAt=" << to_string(timeAt);
  out << ")";
}


CutFrameResult::~CutFrameResult() throw() {
}


void CutFrameResult::__set_succ(const bool val) {
  this->succ = val;
}

void CutFrameResult::__set_dataId(const std::string& val) {
  this->dataId = val;
}

void CutFrameResult::__set_imgs(const std::vector<FrameInfo> & val) {
  this->imgs = val;
}

void CutFrameResult::__set_duration(const double val) {
  this->duration = val;
}
std::ostream& operator<<(std::ostream& out, const CutFrameResult& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t CutFrameResult::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->succ);
          this->__isset.succ = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->dataId);
          this->__isset.dataId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->imgs.clear();
            uint32_t _size6;
            ::apache::thrift::protocol::TType _etype9;
            xfer += iprot->readListBegin(_etype9, _size6);
            this->imgs.resize(_size6);
            uint32_t _i10;
            for (_i10 = 0; _i10 < _size6; ++_i10)
            {
              xfer += this->imgs[_i10].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.imgs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->duration);
          this->__isset.duration = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t CutFrameResult::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("CutFrameResult");

  xfer += oprot->writeFieldBegin("succ", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->succ);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("dataId", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->dataId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("imgs", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->imgs.size()));
    std::vector<FrameInfo> ::const_iterator _iter11;
    for (_iter11 = this->imgs.begin(); _iter11 != this->imgs.end(); ++_iter11)
    {
      xfer += (*_iter11).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("duration", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->duration);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(CutFrameResult &a, CutFrameResult &b) {
  using ::std::swap;
  swap(a.succ, b.succ);
  swap(a.dataId, b.dataId);
  swap(a.imgs, b.imgs);
  swap(a.duration, b.duration);
  swap(a.__isset, b.__isset);
}

CutFrameResult::CutFrameResult(const CutFrameResult& other12) {
  succ = other12.succ;
  dataId = other12.dataId;
  imgs = other12.imgs;
  duration = other12.duration;
  __isset = other12.__isset;
}
CutFrameResult& CutFrameResult::operator=(const CutFrameResult& other13) {
  succ = other13.succ;
  dataId = other13.dataId;
  imgs = other13.imgs;
  duration = other13.duration;
  __isset = other13.__isset;
  return *this;
}
void CutFrameResult::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "CutFrameResult(";
  out << "succ=" << to_string(succ);
  out << ", " << "dataId=" << to_string(dataId);
  out << ", " << "imgs=" << to_string(imgs);
  out << ", " << "duration=" << to_string(duration);
  out << ")";
}

} // namespace
