// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package imagelib

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - DataId
//  - Content
type ImageInput struct {
  DataId string `thrift:"dataId,1" db:"dataId" json:"dataId"`
  Content []byte `thrift:"content,2" db:"content" json:"content"`
}

func NewImageInput() *ImageInput {
  return &ImageInput{}
}


func (p *ImageInput) GetDataId() string {
  return p.DataId
}

func (p *ImageInput) GetContent() []byte {
  return p.Content
}
func (p *ImageInput) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageInput)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DataId = v
}
  return nil
}

func (p *ImageInput)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *ImageInput) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("ImageInput"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageInput) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataId: ", p), err) }
  if err := oprot.WriteString(string(p.DataId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataId: ", p), err) }
  return err
}

func (p *ImageInput) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:content: ", p), err) }
  if err := oprot.WriteBinary(p.Content); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:content: ", p), err) }
  return err
}

func (p *ImageInput) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageInput(%+v)", *p)
}

// Attributes:
//  - Succ
//  - DataId
//  - Imgs
type SplitResult_ struct {
  Succ bool `thrift:"succ,1" db:"succ" json:"succ"`
  DataId string `thrift:"dataId,2" db:"dataId" json:"dataId"`
  Imgs [][]byte `thrift:"imgs,3" db:"imgs" json:"imgs"`
}

func NewSplitResult_() *SplitResult_ {
  return &SplitResult_{}
}


func (p *SplitResult_) GetSucc() bool {
  return p.Succ
}

func (p *SplitResult_) GetDataId() string {
  return p.DataId
}

func (p *SplitResult_) GetImgs() [][]byte {
  return p.Imgs
}
func (p *SplitResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SplitResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Succ = v
}
  return nil
}

func (p *SplitResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataId = v
}
  return nil
}

func (p *SplitResult_)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Imgs =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Imgs = append(p.Imgs, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SplitResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SplitResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SplitResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("succ", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:succ: ", p), err) }
  if err := oprot.WriteBool(bool(p.Succ)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.succ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:succ: ", p), err) }
  return err
}

func (p *SplitResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataId: ", p), err) }
  if err := oprot.WriteString(string(p.DataId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataId: ", p), err) }
  return err
}

func (p *SplitResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("imgs", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:imgs: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Imgs)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Imgs {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:imgs: ", p), err) }
  return err
}

func (p *SplitResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SplitResult_(%+v)", *p)
}

type ImageProc interface {
  // Parameters:
  //  - MediaData
  SplitWebp(ctx context.Context, mediaData *ImageInput) (r *SplitResult_, err error)
}

type ImageProcClient struct {
  c thrift.TClient
}

// Deprecated: Use NewImageProc instead
func NewImageProcClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *ImageProcClient {
  return &ImageProcClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewImageProc instead
func NewImageProcClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *ImageProcClient {
  return &ImageProcClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewImageProcClient(c thrift.TClient) *ImageProcClient {
  return &ImageProcClient{
    c: c,
  }
}

// Parameters:
//  - MediaData
func (p *ImageProcClient) SplitWebp(ctx context.Context, mediaData *ImageInput) (r *SplitResult_, err error) {
  var _args1 ImageProcSplitWebpArgs
  _args1.MediaData = mediaData
  var _result2 ImageProcSplitWebpResult
  if err = p.c.Call(ctx, "splitWebp", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

type ImageProcProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler ImageProc
}

func (p *ImageProcProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *ImageProcProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *ImageProcProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewImageProcProcessor(handler ImageProc) *ImageProcProcessor {

  self3 := &ImageProcProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self3.processorMap["splitWebp"] = &imageProcProcessorSplitWebp{handler:handler}
return self3
}

func (p *ImageProcProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x4 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x4.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x4

}

type imageProcProcessorSplitWebp struct {
  handler ImageProc
}

func (p *imageProcProcessorSplitWebp) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := ImageProcSplitWebpArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("splitWebp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := ImageProcSplitWebpResult{}
var retval *SplitResult_
  var err2 error
  if retval, err2 = p.handler.SplitWebp(ctx, args.MediaData); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing splitWebp: " + err2.Error())
    oprot.WriteMessageBegin("splitWebp", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("splitWebp", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - MediaData
type ImageProcSplitWebpArgs struct {
  MediaData *ImageInput `thrift:"mediaData,1" db:"mediaData" json:"mediaData"`
}

func NewImageProcSplitWebpArgs() *ImageProcSplitWebpArgs {
  return &ImageProcSplitWebpArgs{}
}

var ImageProcSplitWebpArgs_MediaData_DEFAULT *ImageInput
func (p *ImageProcSplitWebpArgs) GetMediaData() *ImageInput {
  if !p.IsSetMediaData() {
    return ImageProcSplitWebpArgs_MediaData_DEFAULT
  }
return p.MediaData
}
func (p *ImageProcSplitWebpArgs) IsSetMediaData() bool {
  return p.MediaData != nil
}

func (p *ImageProcSplitWebpArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageProcSplitWebpArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.MediaData = &ImageInput{}
  if err := p.MediaData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MediaData), err)
  }
  return nil
}

func (p *ImageProcSplitWebpArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("splitWebp_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageProcSplitWebpArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mediaData", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mediaData: ", p), err) }
  if err := p.MediaData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MediaData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mediaData: ", p), err) }
  return err
}

func (p *ImageProcSplitWebpArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageProcSplitWebpArgs(%+v)", *p)
}

// Attributes:
//  - Success
type ImageProcSplitWebpResult struct {
  Success *SplitResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewImageProcSplitWebpResult() *ImageProcSplitWebpResult {
  return &ImageProcSplitWebpResult{}
}

var ImageProcSplitWebpResult_Success_DEFAULT *SplitResult_
func (p *ImageProcSplitWebpResult) GetSuccess() *SplitResult_ {
  if !p.IsSetSuccess() {
    return ImageProcSplitWebpResult_Success_DEFAULT
  }
return p.Success
}
func (p *ImageProcSplitWebpResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *ImageProcSplitWebpResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ImageProcSplitWebpResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SplitResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *ImageProcSplitWebpResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("splitWebp_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ImageProcSplitWebpResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *ImageProcSplitWebpResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ImageProcSplitWebpResult(%+v)", *p)
}


