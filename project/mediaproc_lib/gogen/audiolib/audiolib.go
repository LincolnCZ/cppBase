// Autogenerated by Thrift Compiler (0.11.0)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package audiolib

import (
	"bytes"
	"reflect"
	"context"
	"fmt"
	"github.com/apache/thrift/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = context.Background
var _ = reflect.DeepEqual
var _ = bytes.Equal

// Attributes:
//  - DataId
//  - Content
//  - DataType
//  - Extra
type AudioDataInput struct {
  DataId string `thrift:"dataId,1" db:"dataId" json:"dataId"`
  Content []byte `thrift:"content,2" db:"content" json:"content"`
  DataType string `thrift:"dataType,3" db:"dataType" json:"dataType"`
  Extra string `thrift:"extra,4" db:"extra" json:"extra"`
}

func NewAudioDataInput() *AudioDataInput {
  return &AudioDataInput{}
}


func (p *AudioDataInput) GetDataId() string {
  return p.DataId
}

func (p *AudioDataInput) GetContent() []byte {
  return p.Content
}

func (p *AudioDataInput) GetDataType() string {
  return p.DataType
}

func (p *AudioDataInput) GetExtra() string {
  return p.Extra
}
func (p *AudioDataInput) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AudioDataInput)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.DataId = v
}
  return nil
}

func (p *AudioDataInput)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *AudioDataInput)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.DataType = v
}
  return nil
}

func (p *AudioDataInput)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Extra = v
}
  return nil
}

func (p *AudioDataInput) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AudioDataInput"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AudioDataInput) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dataId: ", p), err) }
  if err := oprot.WriteString(string(p.DataId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dataId: ", p), err) }
  return err
}

func (p *AudioDataInput) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:content: ", p), err) }
  if err := oprot.WriteBinary(p.Content); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:content: ", p), err) }
  return err
}

func (p *AudioDataInput) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataType", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:dataType: ", p), err) }
  if err := oprot.WriteString(string(p.DataType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataType (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:dataType: ", p), err) }
  return err
}

func (p *AudioDataInput) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("extra", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:extra: ", p), err) }
  if err := oprot.WriteString(string(p.Extra)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.extra (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:extra: ", p), err) }
  return err
}

func (p *AudioDataInput) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AudioDataInput(%+v)", *p)
}

// Attributes:
//  - Succ
//  - DataId
//  - Contents
//  - Duration
//  - Segtime
type SplitResult_ struct {
  Succ bool `thrift:"succ,1" db:"succ" json:"succ"`
  DataId string `thrift:"dataId,2" db:"dataId" json:"dataId"`
  Contents [][]byte `thrift:"contents,3" db:"contents" json:"contents"`
  Duration float64 `thrift:"duration,4" db:"duration" json:"duration"`
  Segtime int32 `thrift:"segtime,5" db:"segtime" json:"segtime"`
}

func NewSplitResult_() *SplitResult_ {
  return &SplitResult_{}
}


func (p *SplitResult_) GetSucc() bool {
  return p.Succ
}

func (p *SplitResult_) GetDataId() string {
  return p.DataId
}

func (p *SplitResult_) GetContents() [][]byte {
  return p.Contents
}

func (p *SplitResult_) GetDuration() float64 {
  return p.Duration
}

func (p *SplitResult_) GetSegtime() int32 {
  return p.Segtime
}
func (p *SplitResult_) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *SplitResult_)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Succ = v
}
  return nil
}

func (p *SplitResult_)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataId = v
}
  return nil
}

func (p *SplitResult_)  ReadField3(iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin()
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([][]byte, 0, size)
  p.Contents =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 []byte
    if v, err := iprot.ReadBinary(); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.Contents = append(p.Contents, _elem0)
  }
  if err := iprot.ReadListEnd(); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *SplitResult_)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Duration = v
}
  return nil
}

func (p *SplitResult_)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Segtime = v
}
  return nil
}

func (p *SplitResult_) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("SplitResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *SplitResult_) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("succ", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:succ: ", p), err) }
  if err := oprot.WriteBool(bool(p.Succ)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.succ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:succ: ", p), err) }
  return err
}

func (p *SplitResult_) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataId: ", p), err) }
  if err := oprot.WriteString(string(p.DataId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataId: ", p), err) }
  return err
}

func (p *SplitResult_) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("contents", thrift.LIST, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:contents: ", p), err) }
  if err := oprot.WriteListBegin(thrift.STRING, len(p.Contents)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.Contents {
    if err := oprot.WriteBinary(v); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:contents: ", p), err) }
  return err
}

func (p *SplitResult_) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("duration", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:duration: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Duration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.duration (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:duration: ", p), err) }
  return err
}

func (p *SplitResult_) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("segtime", thrift.I32, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:segtime: ", p), err) }
  if err := oprot.WriteI32(int32(p.Segtime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.segtime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:segtime: ", p), err) }
  return err
}

func (p *SplitResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("SplitResult_(%+v)", *p)
}

// Attributes:
//  - Succ
//  - DataId
//  - Content
//  - Duration
//  - Format
type AudioOutput struct {
  Succ bool `thrift:"succ,1" db:"succ" json:"succ"`
  DataId string `thrift:"dataId,2" db:"dataId" json:"dataId"`
  Content []byte `thrift:"content,3" db:"content" json:"content"`
  Duration float64 `thrift:"duration,4" db:"duration" json:"duration"`
  Format string `thrift:"format,5" db:"format" json:"format"`
}

func NewAudioOutput() *AudioOutput {
  return &AudioOutput{}
}


func (p *AudioOutput) GetSucc() bool {
  return p.Succ
}

func (p *AudioOutput) GetDataId() string {
  return p.DataId
}

func (p *AudioOutput) GetContent() []byte {
  return p.Content
}

func (p *AudioOutput) GetDuration() float64 {
  return p.Duration
}

func (p *AudioOutput) GetFormat() string {
  return p.Format
}
func (p *AudioOutput) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AudioOutput)  ReadField1(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Succ = v
}
  return nil
}

func (p *AudioOutput)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.DataId = v
}
  return nil
}

func (p *AudioOutput)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Content = v
}
  return nil
}

func (p *AudioOutput)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Duration = v
}
  return nil
}

func (p *AudioOutput)  ReadField5(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Format = v
}
  return nil
}

func (p *AudioOutput) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("AudioOutput"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
    if err := p.writeField5(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AudioOutput) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("succ", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:succ: ", p), err) }
  if err := oprot.WriteBool(bool(p.Succ)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.succ (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:succ: ", p), err) }
  return err
}

func (p *AudioOutput) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("dataId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dataId: ", p), err) }
  if err := oprot.WriteString(string(p.DataId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dataId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dataId: ", p), err) }
  return err
}

func (p *AudioOutput) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("content", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:content: ", p), err) }
  if err := oprot.WriteBinary(p.Content); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.content (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:content: ", p), err) }
  return err
}

func (p *AudioOutput) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("duration", thrift.DOUBLE, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:duration: ", p), err) }
  if err := oprot.WriteDouble(float64(p.Duration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.duration (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:duration: ", p), err) }
  return err
}

func (p *AudioOutput) writeField5(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("format", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:format: ", p), err) }
  if err := oprot.WriteString(string(p.Format)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.format (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:format: ", p), err) }
  return err
}

func (p *AudioOutput) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AudioOutput(%+v)", *p)
}

type AudioProc interface {
  // Parameters:
  //  - MediaData
  //  - Lower
  //  - Upper
  SplitAudio(ctx context.Context, mediaData *AudioDataInput, lower int32, upper int32) (r *SplitResult_, err error)
  // Parameters:
  //  - MediaData
  //  - SampleRate
  //  - Channels
  DecodeAudio(ctx context.Context, mediaData *AudioDataInput, sampleRate int32, channels int32) (r *AudioOutput, err error)
  // Parameters:
  //  - MediaData
  //  - SampleRate
  //  - Channels
  //  - Format
  ConvertAudio(ctx context.Context, mediaData *AudioDataInput, sampleRate int32, channels int32, format string) (r *AudioOutput, err error)
}

type AudioProcClient struct {
  c thrift.TClient
}

// Deprecated: Use NewAudioProc instead
func NewAudioProcClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *AudioProcClient {
  return &AudioProcClient{
    c: thrift.NewTStandardClient(f.GetProtocol(t), f.GetProtocol(t)),
  }
}

// Deprecated: Use NewAudioProc instead
func NewAudioProcClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *AudioProcClient {
  return &AudioProcClient{
    c: thrift.NewTStandardClient(iprot, oprot),
  }
}

func NewAudioProcClient(c thrift.TClient) *AudioProcClient {
  return &AudioProcClient{
    c: c,
  }
}

// Parameters:
//  - MediaData
//  - Lower
//  - Upper
func (p *AudioProcClient) SplitAudio(ctx context.Context, mediaData *AudioDataInput, lower int32, upper int32) (r *SplitResult_, err error) {
  var _args1 AudioProcSplitAudioArgs
  _args1.MediaData = mediaData
  _args1.Lower = lower
  _args1.Upper = upper
  var _result2 AudioProcSplitAudioResult
  if err = p.c.Call(ctx, "splitAudio", &_args1, &_result2); err != nil {
    return
  }
  return _result2.GetSuccess(), nil
}

// Parameters:
//  - MediaData
//  - SampleRate
//  - Channels
func (p *AudioProcClient) DecodeAudio(ctx context.Context, mediaData *AudioDataInput, sampleRate int32, channels int32) (r *AudioOutput, err error) {
  var _args3 AudioProcDecodeAudioArgs
  _args3.MediaData = mediaData
  _args3.SampleRate = sampleRate
  _args3.Channels = channels
  var _result4 AudioProcDecodeAudioResult
  if err = p.c.Call(ctx, "decodeAudio", &_args3, &_result4); err != nil {
    return
  }
  return _result4.GetSuccess(), nil
}

// Parameters:
//  - MediaData
//  - SampleRate
//  - Channels
//  - Format
func (p *AudioProcClient) ConvertAudio(ctx context.Context, mediaData *AudioDataInput, sampleRate int32, channels int32, format string) (r *AudioOutput, err error) {
  var _args5 AudioProcConvertAudioArgs
  _args5.MediaData = mediaData
  _args5.SampleRate = sampleRate
  _args5.Channels = channels
  _args5.Format = format
  var _result6 AudioProcConvertAudioResult
  if err = p.c.Call(ctx, "convertAudio", &_args5, &_result6); err != nil {
    return
  }
  return _result6.GetSuccess(), nil
}

type AudioProcProcessor struct {
  processorMap map[string]thrift.TProcessorFunction
  handler AudioProc
}

func (p *AudioProcProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
  p.processorMap[key] = processor
}

func (p *AudioProcProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, ok bool) {
  processor, ok = p.processorMap[key]
  return processor, ok
}

func (p *AudioProcProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
  return p.processorMap
}

func NewAudioProcProcessor(handler AudioProc) *AudioProcProcessor {

  self7 := &AudioProcProcessor{handler:handler, processorMap:make(map[string]thrift.TProcessorFunction)}
  self7.processorMap["splitAudio"] = &audioProcProcessorSplitAudio{handler:handler}
  self7.processorMap["decodeAudio"] = &audioProcProcessorDecodeAudio{handler:handler}
  self7.processorMap["convertAudio"] = &audioProcProcessorConvertAudio{handler:handler}
return self7
}

func (p *AudioProcProcessor) Process(ctx context.Context, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  name, _, seqId, err := iprot.ReadMessageBegin()
  if err != nil { return false, err }
  if processor, ok := p.GetProcessorFunction(name); ok {
    return processor.Process(ctx, seqId, iprot, oprot)
  }
  iprot.Skip(thrift.STRUCT)
  iprot.ReadMessageEnd()
  x8 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function " + name)
  oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
  x8.Write(oprot)
  oprot.WriteMessageEnd()
  oprot.Flush()
  return false, x8

}

type audioProcProcessorSplitAudio struct {
  handler AudioProc
}

func (p *audioProcProcessorSplitAudio) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AudioProcSplitAudioArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("splitAudio", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AudioProcSplitAudioResult{}
var retval *SplitResult_
  var err2 error
  if retval, err2 = p.handler.SplitAudio(ctx, args.MediaData, args.Lower, args.Upper); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing splitAudio: " + err2.Error())
    oprot.WriteMessageBegin("splitAudio", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("splitAudio", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type audioProcProcessorDecodeAudio struct {
  handler AudioProc
}

func (p *audioProcProcessorDecodeAudio) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AudioProcDecodeAudioArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("decodeAudio", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AudioProcDecodeAudioResult{}
var retval *AudioOutput
  var err2 error
  if retval, err2 = p.handler.DecodeAudio(ctx, args.MediaData, args.SampleRate, args.Channels); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing decodeAudio: " + err2.Error())
    oprot.WriteMessageBegin("decodeAudio", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("decodeAudio", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}

type audioProcProcessorConvertAudio struct {
  handler AudioProc
}

func (p *audioProcProcessorConvertAudio) Process(ctx context.Context, seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
  args := AudioProcConvertAudioArgs{}
  if err = args.Read(iprot); err != nil {
    iprot.ReadMessageEnd()
    x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
    oprot.WriteMessageBegin("convertAudio", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return false, err
  }

  iprot.ReadMessageEnd()
  result := AudioProcConvertAudioResult{}
var retval *AudioOutput
  var err2 error
  if retval, err2 = p.handler.ConvertAudio(ctx, args.MediaData, args.SampleRate, args.Channels, args.Format); err2 != nil {
    x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing convertAudio: " + err2.Error())
    oprot.WriteMessageBegin("convertAudio", thrift.EXCEPTION, seqId)
    x.Write(oprot)
    oprot.WriteMessageEnd()
    oprot.Flush()
    return true, err2
  } else {
    result.Success = retval
}
  if err2 = oprot.WriteMessageBegin("convertAudio", thrift.REPLY, seqId); err2 != nil {
    err = err2
  }
  if err2 = result.Write(oprot); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.WriteMessageEnd(); err == nil && err2 != nil {
    err = err2
  }
  if err2 = oprot.Flush(); err == nil && err2 != nil {
    err = err2
  }
  if err != nil {
    return
  }
  return true, err
}


// HELPER FUNCTIONS AND STRUCTURES

// Attributes:
//  - MediaData
//  - Lower
//  - Upper
type AudioProcSplitAudioArgs struct {
  MediaData *AudioDataInput `thrift:"mediaData,1" db:"mediaData" json:"mediaData"`
  Lower int32 `thrift:"lower,2" db:"lower" json:"lower"`
  Upper int32 `thrift:"upper,3" db:"upper" json:"upper"`
}

func NewAudioProcSplitAudioArgs() *AudioProcSplitAudioArgs {
  return &AudioProcSplitAudioArgs{}
}

var AudioProcSplitAudioArgs_MediaData_DEFAULT *AudioDataInput
func (p *AudioProcSplitAudioArgs) GetMediaData() *AudioDataInput {
  if !p.IsSetMediaData() {
    return AudioProcSplitAudioArgs_MediaData_DEFAULT
  }
return p.MediaData
}

func (p *AudioProcSplitAudioArgs) GetLower() int32 {
  return p.Lower
}

func (p *AudioProcSplitAudioArgs) GetUpper() int32 {
  return p.Upper
}
func (p *AudioProcSplitAudioArgs) IsSetMediaData() bool {
  return p.MediaData != nil
}

func (p *AudioProcSplitAudioArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AudioProcSplitAudioArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.MediaData = &AudioDataInput{}
  if err := p.MediaData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MediaData), err)
  }
  return nil
}

func (p *AudioProcSplitAudioArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Lower = v
}
  return nil
}

func (p *AudioProcSplitAudioArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Upper = v
}
  return nil
}

func (p *AudioProcSplitAudioArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("splitAudio_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AudioProcSplitAudioArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mediaData", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mediaData: ", p), err) }
  if err := p.MediaData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MediaData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mediaData: ", p), err) }
  return err
}

func (p *AudioProcSplitAudioArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("lower", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:lower: ", p), err) }
  if err := oprot.WriteI32(int32(p.Lower)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lower (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:lower: ", p), err) }
  return err
}

func (p *AudioProcSplitAudioArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("upper", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:upper: ", p), err) }
  if err := oprot.WriteI32(int32(p.Upper)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.upper (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:upper: ", p), err) }
  return err
}

func (p *AudioProcSplitAudioArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AudioProcSplitAudioArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AudioProcSplitAudioResult struct {
  Success *SplitResult_ `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAudioProcSplitAudioResult() *AudioProcSplitAudioResult {
  return &AudioProcSplitAudioResult{}
}

var AudioProcSplitAudioResult_Success_DEFAULT *SplitResult_
func (p *AudioProcSplitAudioResult) GetSuccess() *SplitResult_ {
  if !p.IsSetSuccess() {
    return AudioProcSplitAudioResult_Success_DEFAULT
  }
return p.Success
}
func (p *AudioProcSplitAudioResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AudioProcSplitAudioResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AudioProcSplitAudioResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &SplitResult_{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AudioProcSplitAudioResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("splitAudio_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AudioProcSplitAudioResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AudioProcSplitAudioResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AudioProcSplitAudioResult(%+v)", *p)
}

// Attributes:
//  - MediaData
//  - SampleRate
//  - Channels
type AudioProcDecodeAudioArgs struct {
  MediaData *AudioDataInput `thrift:"mediaData,1" db:"mediaData" json:"mediaData"`
  SampleRate int32 `thrift:"sampleRate,2" db:"sampleRate" json:"sampleRate"`
  Channels int32 `thrift:"channels,3" db:"channels" json:"channels"`
}

func NewAudioProcDecodeAudioArgs() *AudioProcDecodeAudioArgs {
  return &AudioProcDecodeAudioArgs{}
}

var AudioProcDecodeAudioArgs_MediaData_DEFAULT *AudioDataInput
func (p *AudioProcDecodeAudioArgs) GetMediaData() *AudioDataInput {
  if !p.IsSetMediaData() {
    return AudioProcDecodeAudioArgs_MediaData_DEFAULT
  }
return p.MediaData
}

func (p *AudioProcDecodeAudioArgs) GetSampleRate() int32 {
  return p.SampleRate
}

func (p *AudioProcDecodeAudioArgs) GetChannels() int32 {
  return p.Channels
}
func (p *AudioProcDecodeAudioArgs) IsSetMediaData() bool {
  return p.MediaData != nil
}

func (p *AudioProcDecodeAudioArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AudioProcDecodeAudioArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.MediaData = &AudioDataInput{}
  if err := p.MediaData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MediaData), err)
  }
  return nil
}

func (p *AudioProcDecodeAudioArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SampleRate = v
}
  return nil
}

func (p *AudioProcDecodeAudioArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Channels = v
}
  return nil
}

func (p *AudioProcDecodeAudioArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("decodeAudio_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AudioProcDecodeAudioArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mediaData", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mediaData: ", p), err) }
  if err := p.MediaData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MediaData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mediaData: ", p), err) }
  return err
}

func (p *AudioProcDecodeAudioArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sampleRate", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sampleRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.SampleRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sampleRate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sampleRate: ", p), err) }
  return err
}

func (p *AudioProcDecodeAudioArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channels", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:channels: ", p), err) }
  if err := oprot.WriteI32(int32(p.Channels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channels (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:channels: ", p), err) }
  return err
}

func (p *AudioProcDecodeAudioArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AudioProcDecodeAudioArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AudioProcDecodeAudioResult struct {
  Success *AudioOutput `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAudioProcDecodeAudioResult() *AudioProcDecodeAudioResult {
  return &AudioProcDecodeAudioResult{}
}

var AudioProcDecodeAudioResult_Success_DEFAULT *AudioOutput
func (p *AudioProcDecodeAudioResult) GetSuccess() *AudioOutput {
  if !p.IsSetSuccess() {
    return AudioProcDecodeAudioResult_Success_DEFAULT
  }
return p.Success
}
func (p *AudioProcDecodeAudioResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AudioProcDecodeAudioResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AudioProcDecodeAudioResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AudioOutput{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AudioProcDecodeAudioResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("decodeAudio_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AudioProcDecodeAudioResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AudioProcDecodeAudioResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AudioProcDecodeAudioResult(%+v)", *p)
}

// Attributes:
//  - MediaData
//  - SampleRate
//  - Channels
//  - Format
type AudioProcConvertAudioArgs struct {
  MediaData *AudioDataInput `thrift:"mediaData,1" db:"mediaData" json:"mediaData"`
  SampleRate int32 `thrift:"sampleRate,2" db:"sampleRate" json:"sampleRate"`
  Channels int32 `thrift:"channels,3" db:"channels" json:"channels"`
  Format string `thrift:"format,4" db:"format" json:"format"`
}

func NewAudioProcConvertAudioArgs() *AudioProcConvertAudioArgs {
  return &AudioProcConvertAudioArgs{}
}

var AudioProcConvertAudioArgs_MediaData_DEFAULT *AudioDataInput
func (p *AudioProcConvertAudioArgs) GetMediaData() *AudioDataInput {
  if !p.IsSetMediaData() {
    return AudioProcConvertAudioArgs_MediaData_DEFAULT
  }
return p.MediaData
}

func (p *AudioProcConvertAudioArgs) GetSampleRate() int32 {
  return p.SampleRate
}

func (p *AudioProcConvertAudioArgs) GetChannels() int32 {
  return p.Channels
}

func (p *AudioProcConvertAudioArgs) GetFormat() string {
  return p.Format
}
func (p *AudioProcConvertAudioArgs) IsSetMediaData() bool {
  return p.MediaData != nil
}

func (p *AudioProcConvertAudioArgs) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AudioProcConvertAudioArgs)  ReadField1(iprot thrift.TProtocol) error {
  p.MediaData = &AudioDataInput{}
  if err := p.MediaData.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.MediaData), err)
  }
  return nil
}

func (p *AudioProcConvertAudioArgs)  ReadField2(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SampleRate = v
}
  return nil
}

func (p *AudioProcConvertAudioArgs)  ReadField3(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Channels = v
}
  return nil
}

func (p *AudioProcConvertAudioArgs)  ReadField4(iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Format = v
}
  return nil
}

func (p *AudioProcConvertAudioArgs) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("convertAudio_args"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(oprot); err != nil { return err }
    if err := p.writeField2(oprot); err != nil { return err }
    if err := p.writeField3(oprot); err != nil { return err }
    if err := p.writeField4(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AudioProcConvertAudioArgs) writeField1(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("mediaData", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:mediaData: ", p), err) }
  if err := p.MediaData.Write(oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.MediaData), err)
  }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:mediaData: ", p), err) }
  return err
}

func (p *AudioProcConvertAudioArgs) writeField2(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("sampleRate", thrift.I32, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sampleRate: ", p), err) }
  if err := oprot.WriteI32(int32(p.SampleRate)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sampleRate (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sampleRate: ", p), err) }
  return err
}

func (p *AudioProcConvertAudioArgs) writeField3(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("channels", thrift.I32, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:channels: ", p), err) }
  if err := oprot.WriteI32(int32(p.Channels)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.channels (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:channels: ", p), err) }
  return err
}

func (p *AudioProcConvertAudioArgs) writeField4(oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin("format", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:format: ", p), err) }
  if err := oprot.WriteString(string(p.Format)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.format (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:format: ", p), err) }
  return err
}

func (p *AudioProcConvertAudioArgs) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AudioProcConvertAudioArgs(%+v)", *p)
}

// Attributes:
//  - Success
type AudioProcConvertAudioResult struct {
  Success *AudioOutput `thrift:"success,0" db:"success" json:"success,omitempty"`
}

func NewAudioProcConvertAudioResult() *AudioProcConvertAudioResult {
  return &AudioProcConvertAudioResult{}
}

var AudioProcConvertAudioResult_Success_DEFAULT *AudioOutput
func (p *AudioProcConvertAudioResult) GetSuccess() *AudioOutput {
  if !p.IsSetSuccess() {
    return AudioProcConvertAudioResult_Success_DEFAULT
  }
return p.Success
}
func (p *AudioProcConvertAudioResult) IsSetSuccess() bool {
  return p.Success != nil
}

func (p *AudioProcConvertAudioResult) Read(iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 0:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField0(iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *AudioProcConvertAudioResult)  ReadField0(iprot thrift.TProtocol) error {
  p.Success = &AudioOutput{}
  if err := p.Success.Read(iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Success), err)
  }
  return nil
}

func (p *AudioProcConvertAudioResult) Write(oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin("convertAudio_result"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField0(oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *AudioProcConvertAudioResult) writeField0(oprot thrift.TProtocol) (err error) {
  if p.IsSetSuccess() {
    if err := oprot.WriteFieldBegin("success", thrift.STRUCT, 0); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 0:success: ", p), err) }
    if err := p.Success.Write(oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Success), err)
    }
    if err := oprot.WriteFieldEnd(); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 0:success: ", p), err) }
  }
  return err
}

func (p *AudioProcConvertAudioResult) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("AudioProcConvertAudioResult(%+v)", *p)
}


