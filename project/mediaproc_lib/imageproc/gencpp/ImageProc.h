/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ImageProc_H
#define ImageProc_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "imagelib_types.h"

namespace imagelib {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ImageProcIf {
 public:
  virtual ~ImageProcIf() {}
  virtual void splitWebp(SplitResult& _return, const ImageInput& mediaData) = 0;
};

class ImageProcIfFactory {
 public:
  typedef ImageProcIf Handler;

  virtual ~ImageProcIfFactory() {}

  virtual ImageProcIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ImageProcIf* /* handler */) = 0;
};

class ImageProcIfSingletonFactory : virtual public ImageProcIfFactory {
 public:
  ImageProcIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ImageProcIf>& iface) : iface_(iface) {}
  virtual ~ImageProcIfSingletonFactory() {}

  virtual ImageProcIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ImageProcIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ImageProcIf> iface_;
};

class ImageProcNull : virtual public ImageProcIf {
 public:
  virtual ~ImageProcNull() {}
  void splitWebp(SplitResult& /* _return */, const ImageInput& /* mediaData */) {
    return;
  }
};

typedef struct _ImageProc_splitWebp_args__isset {
  _ImageProc_splitWebp_args__isset() : mediaData(false) {}
  bool mediaData :1;
} _ImageProc_splitWebp_args__isset;

class ImageProc_splitWebp_args {
 public:

  ImageProc_splitWebp_args(const ImageProc_splitWebp_args&);
  ImageProc_splitWebp_args& operator=(const ImageProc_splitWebp_args&);
  ImageProc_splitWebp_args() {
  }

  virtual ~ImageProc_splitWebp_args() throw();
  ImageInput mediaData;

  _ImageProc_splitWebp_args__isset __isset;

  void __set_mediaData(const ImageInput& val);

  bool operator == (const ImageProc_splitWebp_args & rhs) const
  {
    if (!(mediaData == rhs.mediaData))
      return false;
    return true;
  }
  bool operator != (const ImageProc_splitWebp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageProc_splitWebp_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ImageProc_splitWebp_pargs {
 public:


  virtual ~ImageProc_splitWebp_pargs() throw();
  const ImageInput* mediaData;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImageProc_splitWebp_result__isset {
  _ImageProc_splitWebp_result__isset() : success(false) {}
  bool success :1;
} _ImageProc_splitWebp_result__isset;

class ImageProc_splitWebp_result {
 public:

  ImageProc_splitWebp_result(const ImageProc_splitWebp_result&);
  ImageProc_splitWebp_result& operator=(const ImageProc_splitWebp_result&);
  ImageProc_splitWebp_result() {
  }

  virtual ~ImageProc_splitWebp_result() throw();
  SplitResult success;

  _ImageProc_splitWebp_result__isset __isset;

  void __set_success(const SplitResult& val);

  bool operator == (const ImageProc_splitWebp_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ImageProc_splitWebp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageProc_splitWebp_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ImageProc_splitWebp_presult__isset {
  _ImageProc_splitWebp_presult__isset() : success(false) {}
  bool success :1;
} _ImageProc_splitWebp_presult__isset;

class ImageProc_splitWebp_presult {
 public:


  virtual ~ImageProc_splitWebp_presult() throw();
  SplitResult* success;

  _ImageProc_splitWebp_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ImageProcClient : virtual public ImageProcIf {
 public:
  ImageProcClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ImageProcClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void splitWebp(SplitResult& _return, const ImageInput& mediaData);
  void send_splitWebp(const ImageInput& mediaData);
  void recv_splitWebp(SplitResult& _return);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ImageProcProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ImageProcIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ImageProcProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_splitWebp(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ImageProcProcessor(::apache::thrift::stdcxx::shared_ptr<ImageProcIf> iface) :
    iface_(iface) {
    processMap_["splitWebp"] = &ImageProcProcessor::process_splitWebp;
  }

  virtual ~ImageProcProcessor() {}
};

class ImageProcProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ImageProcProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ImageProcIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ImageProcIfFactory > handlerFactory_;
};

class ImageProcMultiface : virtual public ImageProcIf {
 public:
  ImageProcMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ImageProcIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ImageProcMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ImageProcIf> > ifaces_;
  ImageProcMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ImageProcIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void splitWebp(SplitResult& _return, const ImageInput& mediaData) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->splitWebp(_return, mediaData);
    }
    ifaces_[i]->splitWebp(_return, mediaData);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ImageProcConcurrentClient : virtual public ImageProcIf {
 public:
  ImageProcConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ImageProcConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void splitWebp(SplitResult& _return, const ImageInput& mediaData);
  int32_t send_splitWebp(const ImageInput& mediaData);
  void recv_splitWebp(SplitResult& _return, const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
