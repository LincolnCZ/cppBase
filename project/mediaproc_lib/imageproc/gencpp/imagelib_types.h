/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef imagelib_TYPES_H
#define imagelib_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace imagelib {

class ImageInput;

class SplitResult;

typedef struct _ImageInput__isset {
  _ImageInput__isset() : dataId(false), content(false) {}
  bool dataId :1;
  bool content :1;
} _ImageInput__isset;

class ImageInput : public virtual ::apache::thrift::TBase {
 public:

  ImageInput(const ImageInput&);
  ImageInput& operator=(const ImageInput&);
  ImageInput() : dataId(), content() {
  }

  virtual ~ImageInput() throw();
  std::string dataId;
  std::string content;

  _ImageInput__isset __isset;

  void __set_dataId(const std::string& val);

  void __set_content(const std::string& val);

  bool operator == (const ImageInput & rhs) const
  {
    if (!(dataId == rhs.dataId))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const ImageInput &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ImageInput & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ImageInput &a, ImageInput &b);

std::ostream& operator<<(std::ostream& out, const ImageInput& obj);

typedef struct _SplitResult__isset {
  _SplitResult__isset() : succ(false), dataId(false), imgs(false) {}
  bool succ :1;
  bool dataId :1;
  bool imgs :1;
} _SplitResult__isset;

class SplitResult : public virtual ::apache::thrift::TBase {
 public:

  SplitResult(const SplitResult&);
  SplitResult& operator=(const SplitResult&);
  SplitResult() : succ(0), dataId() {
  }

  virtual ~SplitResult() throw();
  bool succ;
  std::string dataId;
  std::vector<std::string>  imgs;

  _SplitResult__isset __isset;

  void __set_succ(const bool val);

  void __set_dataId(const std::string& val);

  void __set_imgs(const std::vector<std::string> & val);

  bool operator == (const SplitResult & rhs) const
  {
    if (!(succ == rhs.succ))
      return false;
    if (!(dataId == rhs.dataId))
      return false;
    if (!(imgs == rhs.imgs))
      return false;
    return true;
  }
  bool operator != (const SplitResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SplitResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SplitResult &a, SplitResult &b);

std::ostream& operator<<(std::ostream& out, const SplitResult& obj);

} // namespace

#endif
